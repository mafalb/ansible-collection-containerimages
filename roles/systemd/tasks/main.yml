# vim: set ft=yaml ts=2 expandtab:
---

- name: Get OS specific variables
  with_first_found:
  - "{{ ansible_os_family }}-{{ ansible_distribution_major_version }}.yml"
  - "{{ ansible_os_family }}.yml"
  ansible.builtin.include_vars:
    file: "{{ item }}"

- name: Yum plugins are enabled
  ansible.builtin.lineinfile:
    path: /etc/yum.conf
    line: plugins=1
    regexp: '^plugins='
    backup: true
  when: yum_needs_plugin|default(false)|bool

- name: Required packages are present
  ansible.builtin.package:
    name: "{{ packages }}"

- name: Unwanted packages are absent
  ansible.builtin.package:
    name: "{{ packages_to_remove }}"
    state: absent
  when: packages_to_remove is defined

- name: Find unneeded systemd files
  ansible.builtin.find:
    paths:
    - /lib/systemd/system/sockets.target.wants
    patterns:
    - '*udev*'
    - '*initctl*'
    file_type: link
  register: _unneeded_files_1

- name: Find unneeded systemd files
  ansible.builtin.find:
    paths:
    - /lib/systemd/system/sysinit.target.wants
    - /lib/systemd/system/multi-user.target.wants
    - /lib/systemd/system/local-fs.target.wants
    - /lib/systemd/system/basic.target.wants
    - /lib/systemd/system/anaconda.target.wants
    file_type: link
    excludes:
    - systemd-tmpfiles-setup.service
    - systemd-user-sessions.service
  register: _unneeded_files_2

- name: Unneeded systemd files are absent
  ansible.builtin.file:
    path: "{{ file.path }}"
    state: absent
  loop: "{{ _unneeded_files_1.files + _unneeded_files_2.files }}"
  loop_control:
    loop_var: file
    label: "{{ file.path }}"

# systemd is not running - mask manually
#
- name: Units are masked
  ansible.builtin.file:
    src: /dev/null
    dest: /etc/systemd/system/{{ item }}
    state: link
  loop: "{{ systemd_masked }}"
  when: systemd_masked is defined

...
